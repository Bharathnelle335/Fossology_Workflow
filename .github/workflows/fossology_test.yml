name: Fossology Scan

on:
  workflow_dispatch:
    inputs:
      scan_type:
        description: "Type of scan"
        required: true
        default: "docker"
        type: choice
        options:
          - docker
          - repo
          - file
      docker_image:
        description: "Docker image name (e.g., nginx:1.25)"
        required: false
      repo_url:
        description: "Git repo URL (for repo scans)"
        required: false
      file_path:
        description: "Path to file (for file scans)"
        required: false
      agents_nomos:
        description: "Run Nomos license scanner"
        type: boolean
        default: true
      agents_monk:
        description: "Run Monk license scanner"
        type: boolean
        default: false
      agents_copyright:
        description: "Run Copyright detector"
        type: boolean
        default: true
      agents_email:
        description: "Run Email detector"
        type: boolean
        default: false
      agents_keyword:
        description: "Run Keyword detector"
        type: boolean
        default: false

jobs:
  fossology:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Fossology container
        run: |
          echo "üê≥ Starting Fossology..."
          docker run -d --name fossy -p 8081:80 fossology/fossology:4.3.0
          sleep 60

      - name: Generate Fossology API Token
        run: |
          TOKEN=$(docker exec fossy php /usr/local/lib/fossology/cli/createToken.php fossy fossy --token | tail -n1)
          echo "FOSSOLOGY_TOKEN=$TOKEN" >> $GITHUB_ENV
          echo "üîë Token generated for fossy user"

      # ----------------- Prepare Inputs -----------------
      - name: Save Docker image
        if: github.event.inputs.scan_type == 'docker'
        run: |
          echo "üì¶ Pulling Docker image: ${{ github.event.inputs.docker_image }}"
          docker pull ${{ github.event.inputs.docker_image }}
          docker save ${{ github.event.inputs.docker_image }} -o docker-image.tar
          ls -lh docker-image.tar

      - name: Create repo input
        if: github.event.inputs.scan_type == 'repo'
        run: |
          echo "Repo URL: ${{ github.event.inputs.repo_url }}" > repo.txt
          ls -lh repo.txt

      - name: Create file input
        if: github.event.inputs.scan_type == 'file'
        run: |
          echo "File path: ${{ github.event.inputs.file_path }}" > file.txt
          ls -lh file.txt

      # ----------------- Upload -----------------
      - name: Upload to Fossology
        run: |
          if [ "${{ github.event.inputs.scan_type }}" = "docker" ]; then
            FILE_TO_UPLOAD="docker-image.tar"
            MIME_TYPE="application/x-tar"
          elif [ "${{ github.event.inputs.scan_type }}" = "repo" ]; then
            FILE_TO_UPLOAD="repo.txt"
            MIME_TYPE="text/plain"
          else
            FILE_TO_UPLOAD="file.txt"
            MIME_TYPE="text/plain"
          fi

          echo "üì§ Uploading $FILE_TO_UPLOAD to Fossology..."

          UPLOAD_RESP=$(curl -s -X POST "http://localhost:8081/repo/api/v1/uploads" \
            -H "accept: application/json" \
            -H "folderId: 1" \
            -H "public: public" \
            -H "applyGlobal: false" \
            -H "ignoreScm: false" \
            -H "uploadType: file" \
            -H "Authorization: Bearer $FOSSOLOGY_TOKEN" \
            -F "fileInput=@$FILE_TO_UPLOAD;type=$MIME_TYPE")

          echo "Upload Response: $UPLOAD_RESP"
          UPLOAD_ID=$(echo "$UPLOAD_RESP" | jq -r '.message')
          echo "UPLOAD_ID=$UPLOAD_ID" >> $GITHUB_ENV
          echo "‚úÖ Uploaded with ID: $UPLOAD_ID"

      # ----------------- Trigger Agents -----------------
      - name: Trigger Fossology Agents
        run: |
          AGENTS=""
          if [ "${{ github.event.inputs.agents_nomos }}" = "true" ]; then AGENTS="$AGENTS,nomos"; fi
          if [ "${{ github.event.inputs.agents_monk }}" = "true" ]; then AGENTS="$AGENTS,monk"; fi
          if [ "${{ github.event.inputs.agents_copyright }}" = "true" ]; then AGENTS="$AGENTS,copyright"; fi
          if [ "${{ github.event.inputs.agents_email }}" = "true" ]; then AGENTS="$AGENTS,email"; fi
          if [ "${{ github.event.inputs.agents_keyword }}" = "true" ]; then AGENTS="$AGENTS,keyword"; fi
          AGENTS=$(echo "$AGENTS" | sed 's/^,//')

          echo "üîç Running agents: $AGENTS"

          JOB_RESP=$(curl -s -X POST "http://localhost:8081/repo/api/v1/jobs?uploadId=$UPLOAD_ID&agents=$AGENTS" \
            -H "accept: application/json" \
            -H "Authorization: Bearer $FOSSOLOGY_TOKEN")

          echo "Job Response: $JOB_RESP"
