name: Fossology Test (Token Split + Bearer Fix + Folder Poll)

on:
  workflow_dispatch:
    inputs:
      scan_type:
        description: "Type of scan"
        required: true
        default: "docker"
        type: choice
        options: [docker, repo, file]
      docker_image:
        required: false
      repo_url:
        required: false
      file_path:
        required: false
      token_days:
        required: true
        default: "7"
      agents_nomos:
        default: "true"
        type: boolean
      agents_monk:
        default: "false"
        type: boolean
      agents_copyright:
        default: "true"
        type: boolean
      agents_email:
        default: "false"
        type: boolean
      agents_keyword:
        default: "false"
        type: boolean

jobs:
  fossology:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare input file
        run: |
          case "${{ github.event.inputs.scan_type }}" in
            docker)
              docker pull ${{ github.event.inputs.docker_image }}
              docker save ${{ github.event.inputs.docker_image }} -o docker-image.tar
              FILE_TO_UPLOAD="docker-image.tar"
              MIME_TYPE="application/x-tar"
              ;;
            repo)
              echo "Repo URL: ${{ github.event.inputs.repo_url }}" > repo.txt
              FILE_TO_UPLOAD="repo.txt"
              MIME_TYPE="text/plain"
              ;;
            file)
              echo "File path: ${{ github.event.inputs.file_path }}" > file.txt
              FILE_TO_UPLOAD="file.txt"
              MIME_TYPE="text/plain"
              ;;
          esac
          echo "FILE_TO_UPLOAD=$FILE_TO_UPLOAD" >> $GITHUB_ENV
          echo "MIME_TYPE=$MIME_TYPE" >> $GITHUB_ENV

      - name: Run Fossology scan and fetch results (Token Split)
        run: |
          docker run -d --name fossy -p 8081:80 fossology/fossology:4.3.0
          echo "⏳ Waiting for Fossology to start..."
          sleep 60

          # ===== Generate token =====
          EXPIRY=$(date -d "+${{ github.event.inputs.token_days }} days" +%Y-%m-%d)
          AUTH_RESP=$(curl -s -X POST "http://localhost:8081/repo/api/v1/tokens" \
            -H "accept: application/json" \
            -H "Content-Type: application/json" \
            -d "{
              \"username\": \"fossy\",
              \"password\": \"fossy\",
              \"token_name\": \"github-actions\",
              \"token_scope\": \"write\",
              \"token_expire\": \"$EXPIRY\"
            }")

          RAW_TOKEN=$(echo "$AUTH_RESP" | jq -r '.Authorization' | sed 's/^Bearer //' | tr -d '\r\n[:space:]')
          if [ -z "$RAW_TOKEN" ] || [ "$RAW_TOKEN" = "null" ]; then
            echo "❌ Failed to get token"
            echo "Response: $AUTH_RESP"
            exit 1
          fi

          mkdir token_parts
          printf "%s" "${RAW_TOKEN:0:60}" > token_parts/part1.txt
          printf "%s" "${RAW_TOKEN:60:60}" > token_parts/part2.txt
          printf "%s" "${RAW_TOKEN:120}" > token_parts/part3.txt

          echo "✅ Token acquired, valid until $EXPIRY"
          for f in token_parts/part*.txt; do
            LEN=$(wc -c < "$f" | tr -d ' ')
            HASH=$(sha256sum "$f" | cut -d' ' -f1)
            echo " - $(basename "$f"): length=$LEN, sha256=$HASH"
          done

          assemble_token() {
            echo "Bearer $(<token_parts/part1.txt)$(<token_parts/part2.txt)$(<token_parts/part3.txt)"
          }

          # ===== Upload file =====
          echo "📤 Uploading $FILE_TO_UPLOAD to Fossology..."
          AUTH_HEADER=$(assemble_token)
          echo "Auth header SHA256: $(echo -n "$AUTH_HEADER" | sha256sum | cut -d' ' -f1)"
          UPLOAD_RESP=$(curl -s -w "\n%{http_code}" -X POST "http://localhost:8081/repo/api/v1/uploads" \
            -H "accept: application/json" \
            -H "folderId: 1" \
            -H "public: public" \
            -H "applyGlobal: false" \
            -H "ignoreScm: false" \
            -H "uploadType: file" \
            -H "Authorization: $AUTH_HEADER" \
            -F "fileInput=@$FILE_TO_UPLOAD;type=$MIME_TYPE")

          HTTP_BODY=$(echo "$UPLOAD_RESP" | head -n -1)
          HTTP_STATUS=$(echo "$UPLOAD_RESP" | tail -n 1)

          if [ "$HTTP_STATUS" -ne 201 ]; then
            echo "❌ Upload failed with status $HTTP_STATUS"
            echo "Response: $HTTP_BODY"
            exit 1
          fi

          UPLOAD_ID=$(echo "$HTTP_BODY" | jq -r '.message')
          if ! [[ "$UPLOAD_ID" =~ ^[0-9]+$ ]]; then
            echo "❌ ERROR: Upload ID is not a valid integer. Response was: $HTTP_BODY"
            exit 1
          fi
          echo "✅ Uploaded with ID: $UPLOAD_ID"

          # ===== Wait for folder ID to be ready =====
          echo "⏳ Waiting for upload $UPLOAD_ID to be ready..."
          while true; do
            AUTH_HEADER=$(assemble_token)
            UPLOAD_INFO=$(curl -s -X GET "http://localhost:8081/repo/api/v1/uploads/$UPLOAD_ID" \
              -H "accept: application/json" \
              -H "Authorization: $AUTH_HEADER")

            FOLDER_ID=$(echo "$UPLOAD_INFO" | jq -r '.folderid // empty')
            if [[ "$FOLDER_ID" =~ ^[0-9]+$ ]]; then
              echo "📂 Using folder ID: $FOLDER_ID"
              break
            fi

            MSG=$(echo "$UPLOAD_INFO" | jq -r '.message // empty')
            echo "   Still processing: $MSG"
            sleep 2
          done

          # ===== Build analysis JSON =====
          ANALYSIS_JSON=$(jq -n \
            --argjson nomos $([[ "${{ github.event.inputs.agents_nomos }}" == "true" ]] && echo true || echo false) \
            --argjson monk $([[ "${{ github.event.inputs.agents_monk }}" == "true" ]] && echo true || echo false) \
            --argjson copyright $([[ "${{ github.event.inputs.agents_copyright }}" == "true" ]] && echo true || echo false) \
            --argjson email $([[ "${{ github.event.inputs.agents_email }}" == "true" ]] && echo true || echo false) \
            --argjson keyword $([[ "${{ github.event.inputs.agents_keyword }}" == "true" ]] && echo true || echo false) \
            '{nomos:$nomos, monk:$monk, copyright:$copyright, email:$email, keyword:$keyword}')

          echo "🔍 Running agents: $ANALYSIS_JSON"

          # ===== Trigger agents =====
          AUTH_HEADER=$(assemble_token)
          JOB_RESP=$(curl -s -X POST "http://localhost:8081/repo/api/v1/jobs" \
            -H "accept: application/json" \
            -H "folderId: $FOLDER_ID" \
            -H "uploadId: $UPLOAD_ID" \
            -H "Content-Type: application/json" \
            -H "Authorization: $AUTH_HEADER" \
            -d "{\"analysis\": $ANALYSIS_JSON}")

          JOB_ID=$(echo "$JOB_RESP" | jq -r '.message // .id')
          if ! [[ "$JOB_ID" =~ ^[0-9]+$ ]]; then
            echo "❌ ERROR: Job ID is not a valid integer. Response was: $JOB_RESP"
            exit 1
          fi
          echo "✅ Job started with ID: $JOB_ID"

          # ===== Wait for job completion =====
          echo "⏳ Waiting for job to finish..."
          while true; do
            AUTH_HEADER=$(assemble_token)
            STATUS_RESP=$(curl -s -X GET "http://localhost:8081/repo/api/v1/jobs/$JOB_ID" \
              -H "accept: application/json" \
              -H "Authorization: $AUTH_HEADER")
            STATUS=$(echo "$STATUS_RESP" | jq -r '.status')
            echo "Job status: $STATUS"
            if [ "$STATUS" = "Completed" ]; then
              echo "✅ Job completed"
              break
            elif [ "$STATUS" = "Failed" ]; then
              echo "❌ Job failed"
              exit 1
            fi
            sleep 10
          done

          # ===== Fetch SPDX report =====
          echo "📄 Fetching SPDX license report..."
          AUTH_HEADER=$(assemble_token)
          REPORT=$(curl -s -X GET "http://localhost:8081/repo/api/v1/report?uploadId=$UPLOAD_ID&reportFormat=spdx2" \
          -H "accept: text/plain" \
          -H "Authorization: $AUTH_HEADER")

          echo "===== SPDX License Report ====="
          echo "$REPORT"

          # ===== Cleanup =====
          rm -rf token_parts