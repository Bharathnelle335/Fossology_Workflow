name: Fossology Test (Multi-Format SPDX + Token Split + Conversion)

on:
  workflow_dispatch:
    inputs:
      scan_type:
        description: "Type of scan"
        required: true
        default: "docker"
        type: choice
        options: [docker, repo, file]
      docker_image:
        required: false
      repo_url:
        required: false
      file_path:
        required: false
      token_days:
        required: true
        default: "7"
      agents_nomos:
        default: "true"
        type: boolean
      agents_monk:
        default: "false"
        type: boolean
      agents_copyright:
        default: "true"
        type: boolean
      agents_email:
        default: "false"
        type: boolean
      agents_keyword:
        default: "false"
        type: boolean

jobs:
  fossology:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare input file
        run: |
          case "${{ github.event.inputs.scan_type }}" in
            docker)
              docker pull ${{ github.event.inputs.docker_image }}
              docker save ${{ github.event.inputs.docker_image }} -o docker-image.tar
              FILE_TO_UPLOAD="docker-image.tar"
              MIME_TYPE="application/x-tar"
              ;;
            repo)
              echo "Repo URL: ${{ github.event.inputs.repo_url }}" > repo.txt
              FILE_TO_UPLOAD="repo.txt"
              MIME_TYPE="text/plain"
              ;;
            file)
              echo "File path: ${{ github.event.inputs.file_path }}" > file.txt
              echo "# SPDX-License-Identifier: MIT" >> file.txt
              echo "# Copyright 2025 Bharath Technologies" >> file.txt
              FILE_TO_UPLOAD="file.txt"
              MIME_TYPE="text/plain"
              ;;
          esac
          echo "FILE_TO_UPLOAD=$FILE_TO_UPLOAD" >> $GITHUB_ENV
          echo "MIME_TYPE=$MIME_TYPE" >> $GITHUB_ENV

      - name: Start Fossology and acquire token
        run: |
          docker run -d --name fossy -p 8081:80 fossology/fossology:4.3.0
          echo "‚è≥ Waiting for Fossology to start..."
          sleep 60

          EXPIRY=$(date -d "+${{ github.event.inputs.token_days }} days" +%Y-%m-%d)
          AUTH_RESP=$(curl -s -X POST "http://localhost:8081/repo/api/v1/tokens" \
            -H "accept: application/json" \
            -H "Content-Type: application/json" \
            -d "{\"username\": \"fossy\", \"password\": \"fossy\", \"token_name\": \"github-actions\", \"token_scope\": \"write\", \"token_expire\": \"$EXPIRY\"}")

          RAW_TOKEN=$(echo "$AUTH_RESP" | jq -r '.Authorization' | sed 's/^Bearer //' | tr -d '\r\n[:space:]')
          if [ -z "$RAW_TOKEN" ] || [ "$RAW_TOKEN" = "null" ]; then
            echo "‚ùå Failed to get token"
            echo "Response: $AUTH_RESP"
            exit 1
          fi

          mkdir token_parts
          printf "%s" "${RAW_TOKEN:0:60}" > token_parts/part1.txt
          printf "%s" "${RAW_TOKEN:60:60}" > token_parts/part2.txt
          printf "%s" "${RAW_TOKEN:120}" > token_parts/part3.txt

          assemble_token() {
            echo "Bearer $(<token_parts/part1.txt)$(<token_parts/part2.txt)$(<token_parts/part3.txt)"
          }

          echo "‚úÖ Token acquired, valid until $EXPIRY"
          for f in token_parts/part*.txt; do
            LEN=$(wc -c < "$f" | tr -d ' ')
            HASH=$(sha256sum "$f" | cut -d' ' -f1)
            echo " - $(basename "$f"): length=$LEN, sha256=$HASH"
          done

      - name: Upload file to Fossology
        run: |
          AUTH_HEADER="Bearer $(<token_parts/part1.txt)$(<token_parts/part2.txt)$(<token_parts/part3.txt)"
          echo "üì§ Uploading $FILE_TO_UPLOAD to Fossology..."
          UPLOAD_RESP=$(curl -s -w "\n%{http_code}" -X POST "http://localhost:8081/repo/api/v1/uploads" \
            -H "accept: application/json" \
            -H "folderId: 1" \
            -H "public: public" \
            -H "applyGlobal: false" \
            -H "ignoreScm: false" \
            -H "uploadType: file" \
            -H "Authorization: $AUTH_HEADER" \
            -F "fileInput=@$FILE_TO_UPLOAD;type=$MIME_TYPE")

          HTTP_BODY=$(echo "$UPLOAD_RESP" | head -n -1)
          HTTP_STATUS=$(echo "$UPLOAD_RESP" | tail -n 1)

          if [ "$HTTP_STATUS" -ne 201 ]; then
            echo "‚ùå Upload failed with status $HTTP_STATUS"
            echo "Response: $HTTP_BODY"
            exit 1
          fi

          UPLOAD_ID=$(echo "$HTTP_BODY" | jq -r '.message')
          echo "UPLOAD_ID=$UPLOAD_ID" >> $GITHUB_ENV
          echo "‚úÖ Uploaded with ID: $UPLOAD_ID"

      - name: Wait for folder ID
        run: |
          echo "‚è≥ Waiting for upload $UPLOAD_ID to be ready..."
          while true; do
            AUTH_HEADER="Bearer $(<token_parts/part1.txt)$(<token_parts/part2.txt)$(<token_parts/part3.txt)"
            UPLOAD_INFO=$(curl -s -X GET "http://localhost:8081/repo/api/v1/uploads/$UPLOAD_ID" \
              -H "accept: application/json" \
              -H "Authorization: $AUTH_HEADER")

            FOLDER_ID=$(echo "$UPLOAD_INFO" | jq -r '.folderid // empty')
            if [[ "$FOLDER_ID" =~ ^[0-9]+$ ]]; then
              echo "FOLDER_ID=$FOLDER_ID" >> $GITHUB_ENV
              echo "üìÇ Using folder ID: $FOLDER_ID"
              break
            fi

            MSG=$(echo "$UPLOAD_INFO" | jq -r '.message // empty')
            echo "   Still processing: $MSG"
            sleep 2
          done

      - name: Trigger Fossology agents
        run: |
          ANALYSIS_JSON=$(jq -n \
            --argjson nomos $([[ "${{ github.event.inputs.agents_nomos }}" == "true" ]] && echo true || echo false) \
            --argjson monk $([[ "${{ github.event.inputs.agents_monk }}" == "true" ]] && echo true || echo false) \
            --argjson copyright $([[ "${{ github.event.inputs.agents_copyright }}" == "true" ]] && echo true || echo false) \
            --argjson email $([[ "${{ github.event.inputs.agents_email }}" == "true" ]] && echo true || echo false) \
            --argjson keyword $([[ "${{ github.event.inputs.agents_keyword }}" == "true" ]] && echo true || echo false) \
            '{nomos:$nomos, monk:$monk, copyright:$copyright, email:$email, keyword:$keyword}')

          AUTH_HEADER="Bearer $(<token_parts/part1.txt)$(<token_parts/part2.txt)$(<token_parts/part3.txt)"
          JOB_RESP=$(curl -s -X POST "http://localhost:8081/repo/api/v1/jobs" \
            -H "accept: application/json" \
            -H "folderId: $FOLDER_ID" \
            -H "uploadId: $UPLOAD_ID" \
            -H "Content-Type: application/json" \
            -H "Authorization: $AUTH_HEADER" \
            -d "{\"analysis\": $ANALYSIS_JSON}")

          JOB_ID=$(echo "$JOB_RESP" | jq -r '.message // .id')
          echo "‚è≥ Waiting for job $JOB_ID to complete..."
          while true; do
            AUTH_HEADER="Bearer $(<token_parts/part1.txt)$(<token_parts/part2.txt)$(<token_parts/part3.txt)"
            STATUS=$(curl -s -X GET "http://localhost:8081/repo/api/v1/jobs/$JOB_ID" \
              -H "accept: application/json" \
              -H "Authorization: $AUTH_HEADER" | jq -r '.status')
            echo "Job status: $STATUS"
            [[ "$STATUS" == "Completed" ]] && break
            [[ "$STATUS" == "Failed" ]] && exit 1
            sleep 10
          done

      - name: Fetch SPDX reports in all formats
        run: |
          mkdir -p fossology_reports
          declare -A formats=(
            ["json"]="application/json"
            ["csv"]="text/csv"
            ["txt"]="text/plain"
            ["html"]="text/html"
            ["rdf"]="application/rdf+xml"
            ["xls"]="application/vnd.ms-excel"
          )

          for ext in "${!formats[@]}"; do
            mime="${formats[$ext]}"
            echo "üìÑ Fetching SPDX2 as .$ext..."
            AUTH_HEADER="Bearer $(<token_parts/part1.txt)$(<token_parts/part2.txt)$(<token_parts/part3.txt)"
            curl -s -X GET "http://localhost:8081/repo/api/v1/report?uploadId=$UPLOAD_ID&reportFormat=spdx2" \
              -H "Authorization: $AUTH_HEADER" \
              -H "Accept: $mime" \
              -o "fossology_reports/report_spdx2.$ext"
          done

      - name: Convert SPDX JSON to YAML and Markdown
        run: |
          pip install yq
          python3 -m yq -P fossology_reports/report_spdx2.json > fossology_reports/report_spdx2.yaml
          echo "# SPDX License Summary" > fossology_reports/report_spdx2.md
          jq -r '.files[] | "- **File**: \(.fileName)\n  - **Licenses**: \([.licenses[]?.shortName] // ["NO LICENSE"])"' \
            fossology_reports/report_spdx2.json >> fossology_reports/report_spdx2.md

      - name: Upload SPDX artifacts
        uses: actions/upload-artifact@v4
        with:
          name: SPDX-Reports
          path: fossology_reports/

      - name: Cleanup token fragments
        run: rm -rf token_parts