name: Fossology Test

on:
  workflow_dispatch:
    inputs:
      scan_type:
        description: "Type of scan"
        required: true
        default: "docker"
        type: choice
        options: [docker, repo, file]
      docker_image:
        required: false
      repo_url:
        required: false
      file_path:
        required: false
      token_days:
        required: true
        default: "7"
      agents_nomos:
        default: "true"
        type: boolean
      agents_monk:
        default: "false"
        type: boolean
      agents_copyright:
        default: "true"
        type: boolean
      agents_email:
        default: "false"
        type: boolean
      agents_keyword:
        default: "false"
        type: boolean

jobs:
  fossology:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare input file
        run: |
          case "${{ github.event.inputs.scan_type }}" in
            docker)
              docker pull ${{ github.event.inputs.docker_image }}
              docker save ${{ github.event.inputs.docker_image }} -o docker-image.tar
              FILE_TO_UPLOAD="docker-image.tar"
              MIME_TYPE="application/x-tar"
              ;;
            repo)
              echo "Repo URL: ${{ github.event.inputs.repo_url }}" > repo.txt
              FILE_TO_UPLOAD="repo.txt"
              MIME_TYPE="text/plain"
              ;;
            file)
              echo "File path: ${{ github.event.inputs.file_path }}" > file.txt
              FILE_TO_UPLOAD="file.txt"
              MIME_TYPE="text/plain"
              ;;
          esac
          echo "FILE_TO_UPLOAD=$FILE_TO_UPLOAD" >> $GITHUB_ENV
          echo "MIME_TYPE=$MIME_TYPE" >> $GITHUB_ENV

      - name: Run Fossology scan and fetch results
        run: |
          docker run -d --name fossy -p 8081:80 fossology/fossology:4.3.0
          echo "‚è≥ Waiting for Fossology to start..."
          sleep 60

          # ===== Generate token directly from API =====
          EXPIRY=$(date -d "+${{ github.event.inputs.token_days }} days" +%Y-%m-%d)
          AUTH_RESP=$(curl -s -X POST "http://localhost:8081/repo/api/v1/tokens" \
            -H "accept: application/json" \
            -H "Content-Type: application/json" \
            -d "{
              \"username\": \"fossy\",
              \"password\": \"fossy\",
              \"token_name\": \"github-actions\",
              \"token_scope\": \"write\",
              \"token_expire\": \"$EXPIRY\"
            }")

          RAW_TOKEN=$(echo "$AUTH_RESP" | jq -r '.Authorization' | tr -d '\r\n')
          if [ -z "$RAW_TOKEN" ] || [ "$RAW_TOKEN" = "null" ]; then
            echo "‚ùå Failed to get token"
            echo "Response: $AUTH_RESP"
            exit 1
          fi
          TOKEN="Bearer $RAW_TOKEN"

          # Safe debug info
          echo "‚úÖ Token acquired, valid until $EXPIRY"
          echo "‚ÑπÔ∏è Token length: ${#TOKEN}"
          echo "‚ÑπÔ∏è Token starts with 'Bearer '? $( [[ "$TOKEN" == Bearer* ]] && echo yes || echo no )"
          echo "‚ÑπÔ∏è Token SHA256: $(echo -n "$TOKEN" | sha256sum | cut -d' ' -f1)"
          SAFE_TOKEN_PREVIEW="$(echo "$TOKEN" | sed -E 's/^Bearer ([A-Za-z0-9_-]{0,5}).*([A-Za-z0-9_-]{5})$/Bearer \1...<hidden>...\2/')"
          echo "üîë Token preview: $SAFE_TOKEN_PREVIEW"

          # ===== Upload file =====
          echo "üì§ Uploading $FILE_TO_UPLOAD to Fossology..."
          UPLOAD_RESP=$(curl -s -w "\n%{http_code}" -X POST "http://localhost:8081/repo/api/v1/uploads" \
            -H "accept: application/json" \
            -H "folderId: 1" \
            -H "public: public" \
            -H "applyGlobal: false" \
            -H "ignoreScm: false" \
            -H "uploadType: file" \
            -H "Authorization: $TOKEN" \
            -F "fileInput=@$FILE_TO_UPLOAD;type=$MIME_TYPE")

          HTTP_BODY=$(echo "$UPLOAD_RESP" | head -n -1)
          HTTP_STATUS=$(echo "$UPLOAD_RESP" | tail -n 1)

          if [ "$HTTP_STATUS" -ne 201 ]; then
            echo "‚ùå Upload failed with status $HTTP_STATUS"
            echo "Response: $HTTP_BODY"
            exit 1
          fi

          UPLOAD_ID=$(echo "$HTTP_BODY" | jq -r '.message')
          echo "‚úÖ Uploaded with ID: $UPLOAD_ID"

          # ===== Build agent list =====
          AGENTS=""
          [ "${{ github.event.inputs.agents_nomos }}" = "true" ] && AGENTS="$AGENTS,nomos"
          [ "${{ github.event.inputs.agents_monk }}" = "true" ] && AGENTS="$AGENTS,monk"
          [ "${{ github.event.inputs.agents_copyright }}" = "true" ] && AGENTS="$AGENTS,copyright"
          [ "${{ github.event.inputs.agents_email }}" = "true" ] && AGENTS="$AGENTS,email"
          [ "${{ github.event.inputs.agents_keyword }}" = "true" ] && AGENTS="$AGENTS,keyword"
          AGENTS="${AGENTS#,}"

          # ===== Trigger agents =====
          echo "üîç Running agents: $AGENTS"
          JOB_RESP=$(curl -s -X POST "http://localhost:8081/repo/api/v1/jobs?uploadId=$UPLOAD_ID&agents=$AGENTS" \
            -H "accept: application/json" \
            -H "Authorization: $TOKEN")
          JOB_ID=$(echo "$JOB_RESP" | jq -r '.message')
          if [ -z "$JOB_ID" ] || [ "$JOB_ID" = "null" ]; then
            echo "‚ùå Failed to start job"
            exit 1
          fi
          echo "‚úÖ Job started with ID: $JOB_ID"

          # ===== Wait for job completion =====
          echo "‚è≥ Waiting for job to finish..."
          while true; do
            STATUS_RESP=$(curl -s -X GET "http://localhost:8081/repo/api/v1/jobs/$JOB_ID" \
              -H "accept: application/json" \
              -H "Authorization: $TOKEN")
            STATUS=$(echo "$STATUS_RESP" | jq -r '.status')
            echo "Job status: $STATUS"
            if [ "$STATUS" = "Completed" ]; then
              echo "‚úÖ Job completed"
              break
            elif [ "$STATUS" = "Failed" ]; then
              echo "‚ùå Job failed"
              exit 1
            fi
            sleep 10
          done

          # ===== Fetch SPDX report =====
          echo "üìÑ Fetching SPDX license report..."
          REPORT=$(curl -s -X GET "http://localhost:8081/repo/api/v1/report?uploadId=$UPLOAD_ID&reportFormat=spdx2" \
            -H "accept: text/plain" \
            -H "Authorization: $TOKEN")
          echo "===== SPDX License Report ====="
          echo "$REPORT"