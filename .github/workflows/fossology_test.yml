name: Fossology Sample Scan

on: workflow_dispatch

jobs:
  fossology-scan:
    runs-on: ubuntu-latest

    steps:
      - name: 🧱 Create SPDX-tagged dummy file
        run: |
          echo "# SPDX-License-Identifier: MIT" > dummy.py
          tar -czf dummy.tar.gz dummy.py
          echo "FILE_TO_UPLOAD=dummy.tar.gz" >> $GITHUB_ENV
          echo "MIME_TYPE=application/x-tar" >> $GITHUB_ENV

      - name: 🐳 Start Fossology and acquire token
        run: |
          docker run -d --name fossy -p 8081:80 fossology/fossology:4.3.0
          echo "⏳ Waiting for Fossology to start..."
          sleep 60

          EXPIRY=$(date -d "+7 days" +%Y-%m-%d)
          AUTH_RESP=$(curl -s -X POST "http://localhost:8081/repo/api/v1/tokens" \
            -H "accept: application/json" \
            -H "Content-Type: application/json" \
            -d "{\"username\": \"fossy\", \"password\": \"fossy\", \"token_name\": \"gh-action\", \"token_scope\": \"write\", \"token_expire\": \"$EXPIRY\"}")

          RAW_TOKEN=$(echo "$AUTH_RESP" | jq -r '.Authorization' | sed 's/^Bearer //' | tr -d '\r\n[:space:]')
          if [ -z "$RAW_TOKEN" ] || [ "$RAW_TOKEN" = "null" ]; then
            echo "❌ Failed to get token"
            echo "Response: $AUTH_RESP"
            exit 1
          fi

          mkdir token_parts
          printf "%s" "${RAW_TOKEN:0:100}" > token_parts/part1.txt
          printf "%s" "${RAW_TOKEN:100}" > token_parts/part2.txt

      - name: 📤 Upload file to Fossology
        run: |
          AUTH_HEADER="Bearer $(<token_parts/part1.txt)$(<token_parts/part2.txt)"
          UPLOAD_RESP=$(curl -s -X POST "http://localhost:8081/repo/api/v1/uploads" \
            -H "accept: application/json" \
            -H "folderId: 1" \
            -H "uploadType: file" \
            -H "Authorization: $AUTH_HEADER" \
            -F "fileInput=@$FILE_TO_UPLOAD;type=$MIME_TYPE")
          UPLOAD_ID=$(echo "$UPLOAD_RESP" | jq -r '.message')
          echo "UPLOAD_ID=$UPLOAD_ID" >> $GITHUB_ENV

      - name: 🔍 Trigger scan job
        run: |
          ANALYSIS_JSON=$(jq -n '{nomos:true}')
          AUTH_HEADER="Bearer $(<token_parts/part1.txt)$(<token_parts/part2.txt)"
          JOB_RESP=$(curl -s -X POST "http://localhost:8081/repo/api/v1/jobs" \
            -H "accept: application/json" \
            -H "folderId: 1" \
            -H "uploadId: '"$UPLOAD_ID"'" \
            -H "Content-Type: application/json" \
            -H "Authorization: $AUTH_HEADER" \
            -d "{\"analysis\": $ANALYSIS_JSON}")
          JOB_ID=$(echo "$JOB_RESP" | jq -r '.id')

          while true; do
            STATUS=$(curl -s -X GET "http://localhost:8081/repo/api/v1/jobs/$JOB_ID" \
              -H "accept: application/json" \
              -H "Authorization: $AUTH_HEADER" | jq -r '.status')
            [[ "$STATUS" == "Completed" ]] && break
            [[ "$STATUS" == "Failed" ]] && exit 1
            sleep 5
          done

      - name: 📄 Show SPDX result in console
        run: |
          AUTH_HEADER="Bearer $(<token_parts/part1.txt)$(<token_parts/part2.txt)"
          REPORT=$(curl -s -X GET "http://localhost:8081/repo/api/v1/report?uploadId=$UPLOAD_ID&reportFormat=spdx2" \
            -H "accept: application/json" \
            -H "Authorization: $AUTH_HEADER")
          echo "🔍 SPDX Report Summary:"
          echo "$REPORT" | jq '.files[] | {fileName, licenses: [.licenses[].shortName]}'