name: Fossology Scan E2E

on:
  workflow_dispatch:
    inputs:
      scan_type:
        description: "Scan type: docker | repo"
        required: true
        default: "docker"
      docker_image:
        description: "Docker image (if scan_type=docker)"
        default: "alpine:latest"
      repo_url:
        description: "Repo URL (if scan_type=repo)"
        default: "https://github.com/example/repo.git"
      agents:
        description: |
          Comma-separated list of agents to run. Options:
          - nomos: Core license scanner (required for most license detection)
          - ojo: Extended license scanner (depends on nomos)
          - monk: Detects license text in archives/binaries
          - copyright: Extracts copyright statements
          - keyword: Finds license-related keywords
          - pkgagent: Detects package metadata & license info
        required: true
        default: "nomos,monk"

jobs:
  fossology:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout workflow repo
        uses: actions/checkout@v4

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y jq git

      - name: Run Fossology scan
        run: |
          set -euo pipefail
          # ====== CONFIG ======
          FOSSOLOGY_URL="http://localhost:8081/repo/api/v1"
          USERNAME="fossy"
          PASSWORD="fossy"
          TOKEN_NAME="ci-run"
          TOKEN_SCOPE="write"
          TOKEN_DAYS=7
          REPORT_FORMAT="spdx2"
          SCAN_TYPE="${{ github.event.inputs.scan_type }}"
          DOCKER_IMAGE="${{ github.event.inputs.docker_image }}"
          REPO_URL="${{ github.event.inputs.repo_url }}"
          AGENTS_INPUT="${{ github.event.inputs.agents }}"
          timestamp() { date +"%Y-%m-%d %H:%M:%S"; }
          log() { echo "[$(timestamp)] $*"; }

          # ====== Parse agents & apply dependency rules ======
          IFS=',' read -ra AGENTS <<< "$AGENTS_INPUT"
          # Trim spaces
          AGENTS=("${AGENTS[@]//[[:space:]]/}")
          # Auto-add nomos if ojo is present
          if [[ " ${AGENTS[*]} " == *" ojo "* ]] && [[ ! " ${AGENTS[*]} " == *" nomos "* ]]; then
            AGENTS+=("nomos")
          fi
          log "üéØ Agents selected: ${AGENTS[*]}"

          # ====== 1Ô∏è‚É£ Prepare input file ======
          case "$SCAN_TYPE" in
            docker)
              log "üê≥ Preparing Docker image..."
              docker pull "$DOCKER_IMAGE"
              docker save "$DOCKER_IMAGE" -o docker-image.tar
              FILE_TO_UPLOAD="docker-image.tar"
              MIME_TYPE="application/x-tar"
              ;;
            repo)
              log "üìÇ Cloning repo..."
              rm -rf repo
              git clone "$REPO_URL" repo/
              echo "# SPDX-License-Identifier: MIT" > repo/spdx_dummy.py
              tar -czf repo.tar.gz -C repo .
              FILE_TO_UPLOAD="repo.tar.gz"
              MIME_TYPE="application/x-tar"
              ;;
            *)
              log "‚ùå Unknown scan_type: $SCAN_TYPE"
              exit 1
              ;;
          esac
          log "‚úÖ Prepared $FILE_TO_UPLOAD ($MIME_TYPE)"

          # ====== 2Ô∏è‚É£ Start Fossology ======
          log "üöÄ Starting Fossology container..."
          docker run -d --name fossy -p 8081:80 fossology/fossology:4.3.0
          log "‚è≥ Waiting for Fossology to start..."
          sleep 60

          # ====== 3Ô∏è‚É£ Get token ======
          EXPIRY=$(date -d "+$TOKEN_DAYS days" +%Y-%m-%d)
          AUTH_RESP=$(curl -s -X POST "$FOSSOLOGY_URL/tokens" \
            -H "accept: application/json" \
            -H "Content-Type: application/json" \
            -d "{\"username\": \"$USERNAME\", \"password\": \"$PASSWORD\", \"token_name\": \"$TOKEN_NAME\", \"token_scope\": \"$TOKEN_SCOPE\", \"token_expire\": \"$EXPIRY\"}")
          RAW_TOKEN=$(echo "$AUTH_RESP" | jq -r '.Authorization' | sed 's/^Bearer //' | tr -d '\r\n[:space:]')
          if [ -z "$RAW_TOKEN" ] || [ "$RAW_TOKEN" = "null" ]; then
            log "‚ùå Failed to get token"
            echo "Response: $AUTH_RESP"
            exit 1
          fi
          AUTH_HEADER="Bearer $RAW_TOKEN"
          log "üîë Token acquired"

          # ====== 4Ô∏è‚É£ Upload file ======
          UPLOAD_RESP=$(curl -s -w "\n%{http_code}" -X POST "$FOSSOLOGY_URL/uploads" \
            -H "accept: application/json" \
            -H "folderId: 1" \
            -H "public: public" \
            -H "applyGlobal: false" \
            -H "ignoreScm: false" \
            -H "uploadType: file" \
            -H "Authorization: $AUTH_HEADER" \
            -F "fileInput=@$FILE_TO_UPLOAD;type=$MIME_TYPE")
          HTTP_BODY=$(echo "$UPLOAD_RESP" | head -n -1)
          HTTP_STATUS=$(echo "$UPLOAD_RESP" | tail -n 1)
          if [ "$HTTP_STATUS" -ne 201 ]; then
            log "‚ùå Upload failed with status $HTTP_STATUS"
            echo "Response: $HTTP_BODY"
            exit 1
          fi
          UPLOAD_ID=$(echo "$HTTP_BODY" | jq -r '.message')
          log "üì¶ Uploaded file, UPLOAD_ID=$UPLOAD_ID"

          # ====== 5Ô∏è‚É£ Wait for folder ID ======
          while true; do
            UPLOAD_INFO=$(curl -s -X GET "$FOSSOLOGY_URL/uploads/$UPLOAD_ID" \
              -H "accept: application/json" \
              -H "Authorization: $AUTH_HEADER")
            FOLDER_ID=$(echo "$UPLOAD_INFO" | jq -r '.folderid // empty')
            if [[ "$FOLDER_ID" =~ ^[0-9]+$ ]]; then
              log "üìÇ FOLDER_ID=$FOLDER_ID"
              break
            fi
            sleep 2
          done

          # ====== 6Ô∏è‚É£ Unpack job ======
          UNPACK_JSON=$(jq -n '{unpack:true}')
          UNPACK_JOB_ID=$(curl -s -X POST "$FOSSOLOGY_URL/jobs" \
            -H "accept: application/json" \
            -H "folderId: $FOLDER_ID" \
            -H "uploadId: $UPLOAD_ID" \
            -H "Content-Type: application/json" \
            -H "Authorization: $AUTH_HEADER" \
            -d "{\"analysis\": $UNPACK_JSON}" | jq -r '.id // .message')
          while true; do
            STATUS=$(curl -s -X GET "$FOSSOLOGY_URL/jobs/$UNPACK_JOB_ID" \
              -H "accept: application/json" \
              -H "Authorization: $AUTH_HEADER" | jq -r '.status')
            [[ "$STATUS" == "Completed" ]] && break
            [[ "$STATUS" == "Failed" ]] && exit 1
            log "‚è≥ Unpack running..."
            sleep 5
          done
          log "‚úÖ Unpack complete"

          # ====== 7Ô∏è‚É£ Build dynamic scan payload ======
          ANALYSIS_JSON=$(jq -n '{}')
          for agent in "${AGENTS[@]}"; do
            case "$agent" in
              nomos) ANALYSIS_JSON=$(echo "$ANALYSIS_JSON" | jq '. + {nomos:true}') ;;
              ojo) ANALYSIS_JSON=$(echo "$ANALYSIS_JSON" | jq '. + {ojo:true}') ;;
              monk) ANALYSIS_JSON=$(echo "$ANALYSIS_JSON" | jq '. + {monk:true}') ;;
              copyright) ANALYSIS_JSON=$(echo "$ANALYSIS_JSON" | jq '. + {copyright_email_author:true}') ;;
              keyword) ANALYSIS_JSON=$(echo "$ANALYSIS_JSON" | jq '. + {keyword:true}') ;;
              pkgagent) ANALYSIS_JSON=$(echo "$ANALYSIS_JSON" | jq '. + {package:true}') ;;
            esac
          done
          SCAN_PAYLOAD=$(jq -n \
            --argjson analysis "$ANALYSIS_JSON" \
            '{analysis:$analysis,decider:{nomos_monk:true,bulk_reused:true,new_scanner:true},reuse:{reuse_upload:0,reuse_group:0,reuse_main:false,reuse_enhanced:false}}')
          log "üìú Scan payload:"
          echo "$SCAN_PAYLOAD" | jq .

            # ====== 8Ô∏è‚É£ Run scan ======
          SCAN_JOB_ID=$(curl -s -X POST "$FOSSOLOGY_URL/jobs" \
            -H "accept: application/json" \
            -H "folderId: $FOLDER_ID" \
            -H "uploadId: $UPLOAD_ID" \
            -H "Content-Type: application/json" \
            -H "Authorization: $AUTH_HEADER" \
            -d "$SCAN_PAYLOAD" | jq -r '.message')

          while true; do
            STATUS=$(curl -s -X GET "$FOSSOLOGY_URL/jobs/$SCAN_JOB_ID" \
              -H "accept: application/json" \
              -H "Authorization: $AUTH_HEADER" | jq -r '.status')
            [[ "$STATUS" == "Completed" ]] && break
            [[ "$STATUS" == "Failed" ]] && exit 1
            log "‚è≥ Scans running..."
            sleep 10
          done
          log "‚úÖ Scans complete"

          mkdir -p fossology_reports

          # ====== 9Ô∏è‚É£ Download native Fossology reports ======
          REPORT_FORMATS=("spdx2" "readmeoss" "license_text" "license_list")
          for fmt in "${REPORT_FORMATS[@]}"; do
            log "üì• Requesting $fmt report..."
            REPORT_JOB=$(curl -s -X GET "$FOSSOLOGY_URL/report" \
              -H "Authorization: $AUTH_HEADER" \
              -H "reportFormat: $fmt" \
              -H "uploadId: $UPLOAD_ID")
            REPORT_PATH=$(echo "$REPORT_JOB" | jq -r '.message')
            while true; do
              HTTP_CODE=$(curl -s -o report.tmp -w "%{http_code}" "$REPORT_PATH" \
                -H "Authorization: $AUTH_HEADER")
              [[ "$HTTP_CODE" == "200" ]] && break
              log "‚è≥ Waiting for $fmt report..."
              sleep 5
            done
            mv report.tmp "fossology_reports/report_${fmt}_$(date +%Y%m%d_%H%M%S).${fmt}"
            log "üíæ Saved $fmt report"
          done

          # ====== üîü JSON ‚Üí CSV flattener ======
          json_to_csv() {
            jq -r '
              def flatten:
                . as $in
                | if type=="object" then
                    reduce keys[] as $k ({}; . + {($k): ($in[$k]|tostring)})
                  elif type=="array" then
                    reduce range(0; length) as $i ({}; . + {($i|tostring): (.[$i]|tostring)})
                  else
                    {"value": tostring}
                  end;
              (if type=="array" then . else [.] end) as $arr
              | ($arr[0] | flatten | keys_unsorted) as $cols
              | $cols, ($arr | map(flatten | [.[$cols[]]])[])
              | @csv
            '
          }

          # ====== 1Ô∏è‚É£1Ô∏è‚É£ Download JSON endpoints & convert to CSV ======
          JSON_ENDPOINTS=(
            "uploads/$UPLOAD_ID/licenses?agent=$(IFS=,; echo "${AGENTS[*]}")&containers=true"
            "uploads/$UPLOAD_ID/copyrights"
            "uploads/$UPLOAD_ID/decisions"
            "uploads/$UPLOAD_ID/obligations"
            "uploads/$UPLOAD_ID/summary"
          )

          for endpoint in "${JSON_ENDPOINTS[@]}"; do
            NAME=$(echo "$endpoint" | sed 's/[^a-zA-Z0-9]/_/g')
            RAW_JSON="fossology_reports/${NAME}_$(date +%Y%m%d_%H%M%S).json"
            CSV_FILE="fossology_reports/${NAME}_$(date +%Y%m%d_%H%M%S).csv"
            log "üì° Fetching $endpoint"
            curl -s "$FOSSOLOGY_URL/$endpoint" \
              -H "Authorization: $AUTH_HEADER" > "$RAW_JSON" || true
            cat "$RAW_JSON" | json_to_csv > "$CSV_FILE" || true
            log "üíæ Saved $RAW_JSON and $CSV_FILE"
          done

          log "üéâ All reports and CSVs collected."

      - name: Upload Fossology reports
        uses: actions/upload-artifact@v4
        with:
          name: fossology-reports
          path: fossology_reports/*