name: Fossology Scan E2E(after co-pi)

on:
  workflow_dispatch:
    inputs:
      scan_type:
        description: "Scan type: docker | repo"
        required: true
        default: "docker"
      docker_image:
        description: "Docker image (if scan_type=docker)"
        default: "alpine:latest"
      repo_url:
        description: "Repo URL (if scan_type=repo)"
        default: "https://github.com/example/repo.git"

      agent_nomos:
        type: boolean
        description: "nomos ‚Äì Core license scanner (required for most license detection)"
        default: true
      agent_ojo:
        type: boolean
        description: "ojo ‚Äì Extended license scanner (depends on nomos)"
        default: false
      agent_monk:
        type: boolean
        description: "monk ‚Äì Detects license text in archives/binaries"
        default: true
      agent_copyright:
        type: boolean
        description: "copyright ‚Äì Extracts copyright statements"
        default: false
      agent_keyword:
        type: boolean
        description: "keyword ‚Äì Finds license-related keywords"
        default: false
      agent_pkgagent:
        type: boolean
        description: "pkgagent ‚Äì Detects package metadata & license info"
        default: false

jobs:
  fossology:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout workflow repo
        uses: actions/checkout@v4

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y jq git

      - name: Run Fossology scan
        run: |
          set -euo pipefail
          # ====== CONFIG ======
          FOSSOLOGY_URL="http://localhost:8081/repo/api/v1"
          USERNAME="fossy"
          PASSWORD="fossy"
          TOKEN_NAME="ci-run"
          TOKEN_SCOPE="write"
          TOKEN_DAYS=7
          SCAN_TYPE="${{ github.event.inputs.scan_type }}"
          DOCKER_IMAGE="${{ github.event.inputs.docker_image }}"
          REPO_URL="${{ github.event.inputs.repo_url }}"
          timestamp() { date +"%Y-%m-%d %H:%M:%S"; }
          log() { echo "[$(timestamp)] $*"; }

          # ====== Build agent list from checkboxes ======
          AGENTS=()
          ${{ github.event.inputs.agent_nomos }} && AGENTS+=("nomos")
          ${{ github.event.inputs.agent_ojo }} && AGENTS+=("ojo")
          ${{ github.event.inputs.agent_monk }} && AGENTS+=("monk")
          ${{ github.event.inputs.agent_copyright }} && AGENTS+=("copyright")
          ${{ github.event.inputs.agent_keyword }} && AGENTS+=("keyword")
          ${{ github.event.inputs.agent_pkgagent }} && AGENTS+=("pkgagent")

          # Auto-add nomos if ojo is selected
          if [[ " ${AGENTS[*]} " == *" ojo "* ]] && [[ ! " ${AGENTS[*]} " == *" nomos "* ]]; then
            AGENTS+=("nomos")
          fi
          log "üéØ Agents selected: ${AGENTS[*]}"

          # ====== 1Ô∏è‚É£ Prepare input file ======
          case "$SCAN_TYPE" in
            docker)
              log "üê≥ Preparing Docker image..."
              docker pull "$DOCKER_IMAGE"
              docker save "$DOCKER_IMAGE" -o docker-image.tar
              FILE_TO_UPLOAD="docker-image.tar"
              MIME_TYPE="application/x-tar"
              ;;
            repo)
              log "üìÇ Cloning repo..."
              rm -rf repo
              git clone "$REPO_URL" repo/
              echo "# SPDX-License-Identifier: MIT" > repo/spdx_dummy.py
              tar -czf repo.tar.gz -C repo .
              FILE_TO_UPLOAD="repo.tar.gz"
              MIME_TYPE="application/x-tar"
              ;;
            *)
              log "‚ùå Unknown scan_type: $SCAN_TYPE"
              exit 1
              ;;
          esac
          log "‚úÖ Prepared $FILE_TO_UPLOAD ($MIME_TYPE)"

          # ====== 2Ô∏è‚É£ Start Fossology ======
          log "üöÄ Starting Fossology container..."
          docker rm -f fossy || true
          docker run -d --name fossy -p 8081:80 fossology/fossology:4.3.0
          log "‚è≥ Waiting for Fossology to start..."
          for i in {1..30}; do
            if curl -s http://localhost:8081/repo/api/v1/version >/dev/null; then
              log "‚úÖ Fossology is up"
              break
            fi
            log "‚è≥ Waiting for Fossology ($i/30)..."
            sleep 10
          done

          # ====== 3Ô∏è‚É£ Get token ======
          EXPIRY=$(date -d "+$TOKEN_DAYS days" +%Y-%m-%d)
          AUTH_RESP=$(curl -s -X POST "$FOSSOLOGY_URL/tokens" \
            -H "accept: application/json" \
            -H "Content-Type: application/json" \
            -d "{\"username\": \"$USERNAME\", \"password\": \"$PASSWORD\", \"token_name\": \"$TOKEN_NAME\", \"token_scope\": \"$TOKEN_SCOPE\", \"token_expire\": \"$EXPIRY\"}")
          RAW_TOKEN=$(echo "$AUTH_RESP" | jq -r '.Authorization' | sed 's/^Bearer //' | tr -d '\r\n[:space:]')
          if [ -z "$RAW_TOKEN" ] || [ "$RAW_TOKEN" = "null" ]; then
            log "‚ùå Failed to get token"
            echo "Response: $AUTH_RESP"
            exit 1
          fi
          AUTH_HEADER="Bearer $RAW_TOKEN"
          log "üîë Token acquired"

          # ====== 4Ô∏è‚É£ Upload file ======
          UPLOAD_RESP=$(curl -s -w "\n%{http_code}" -X POST "$FOSSOLOGY_URL/uploads" \
            -H "accept: application/json" \
            -H "folderId: 1" \
            -H "public: public" \
            -H "applyGlobal: false" \
            -H "ignoreScm: false" \
            -H "uploadType: file" \
            -H "Authorization: $AUTH_HEADER" \
            -F "fileInput=@$FILE_TO_UPLOAD;type=$MIME_TYPE")
          HTTP_BODY=$(echo "$UPLOAD_RESP" | head -n -1)
          HTTP_STATUS=$(echo "$UPLOAD_RESP" | tail -n 1)
          if [ "$HTTP_STATUS" -ne 201 ]; then
            log "‚ùå Upload failed with status $HTTP_STATUS"
            echo "Response: $HTTP_BODY"
            exit 1
          fi
          UPLOAD_ID=$(echo "$HTTP_BODY" | jq -r '.message // .id')
          log "üì¶ Uploaded file, UPLOAD_ID=$UPLOAD_ID"

          # ====== 5Ô∏è‚É£ Wait for folder ID ======
          while true; do
            UPLOAD_INFO=$(curl -s -X GET "$FOSSOLOGY_URL/uploads/$UPLOAD_ID" \
              -H "accept: application/json" \
              -H "Authorization: $AUTH_HEADER")
            FOLDER_ID=$(echo "$UPLOAD_INFO" | jq -r '.folderid // empty')
            if [[ "$FOLDER_ID" =~ ^[0-9]+$ ]]; then
              log "üìÇ FOLDER_ID=$FOLDER_ID"
              break
            fi
            sleep 2
          done

          # ====== 6Ô∏è‚É£ Unpack job ======
          UNPACK_JSON=$(jq -n '{unpack:true}')
          UNPACK_JOB_ID=$(curl -s -X POST "$FOSSOLOGY_URL/jobs" \
            -H "accept: application/json" \
            -H "folderId: $FOLDER_ID" \
            -H "uploadId: $UPLOAD_ID" \
            -H "Content-Type: application/json" \
            -H "Authorization: $AUTH_HEADER" \
            -d "{\"analysis\": $UNPACK_JSON}" | jq -r '.id // .message')
          while true; do
            STATUS=$(curl -s -X GET "$FOSSOLOGY_URL/jobs/$UNPACK_JOB_ID" \
              -H "accept: application/json" \
              -H "Authorization: $AUTH_HEADER" | jq -r '.status')
            [[ "$STATUS" == "Completed" ]] && break
            [[ "$STATUS" == "Failed" ]] && exit 1
            log "‚è≥ Unpack running..."
            sleep 5
          done
          log "‚úÖ Unpack complete"

          # ====== 7Ô∏è‚É£ Build dynamic scan payload ======
          declare -A AGENT_MAP=(
            ["nomos"]="nomos"
            ["ojo"]="ojo"
            ["monk"]="monk"
            ["copyright"]="copyright_email_author"
            ["keyword"]="keyword"
            ["pkgagent"]="pkgagent"
          )

          ANALYSIS_JSON=$(jq -n '{}')
          for agent in "${AGENTS[@]}"; do
            API_AGENT="${AGENT_MAP[$agent]}"
            ANALYSIS_JSON=$(echo "$ANALYSIS_JSON" | jq --arg a "$API_AGENT" '. + {($a):true}')
          done
          SCAN_PAYLOAD=$(jq -n \
            --argjson analysis "$ANALYSIS_JSON" \
            '{analysis:$analysis,decider:{nomos_monk:true,bulk_reused:true,new_scanner:true},reuse:{reuse_upload:0,reuse_group:0,reuse_main:false,reuse_enhanced:false}}')
          log "üìú Scan payload:"
          echo "$SCAN_PAYLOAD" | jq .

          # ====== 8Ô∏è‚É£ Run scan + per-agent summary ======
          SCAN_JOB_JSON=$(curl -s -X POST "$FOSSOLOGY_URL/jobs" \
            -H "accept: application/json" \
            -H "folderId: $FOLDER_ID" \
            -H "uploadId: $UPLOAD_ID" \
            -H "Content-Type: application/json" \
            -H "Authorization: $AUTH_HEADER" \
            -d "$SCAN_PAYLOAD")

          SCAN_JOB_ID=$(echo "$SCAN_JOB_JSON" | jq -r '.message // .id')
          log "üöÄ Started scan job ID=$SCAN_JOB_ID"

          declare -A AGENT_STATUS
          declare -A AGENT_RESULTS

          while true; do
            JOB_JSON=$(curl -s -X GET "$FOSSOLOGY_URL/jobs/$SCAN_JOB_ID" \
              -H "accept: application/json" \
              -H "Authorization: $AUTH_HEADER")

            TASKS=$(echo "$JOB_JSON" | jq -c '.tasks[]')
            PENDING=0
            for task in $TASKS; do
              NAME=$(echo "$task" | jq -r '.name')
              STATUS=$(echo "$task" | jq -r '.status')

              case "$STATUS" in
                Completed) AGENT_STATUS[$NAME]="Completed" ;;
                Failed)    AGENT_STATUS[$NAME]="Failed" ;;
                *)         AGENT_STATUS[$NAME]="Running"; ((PENDING++)) ;;
              esac
            done

            [[ "$PENDING" -eq 0 ]] && break
            log "‚è≥ Scan running... pending=$PENDING"
            sleep 10
          done
          log "‚úÖ All scans complete"

          # Count results per agent
          for agent in "${AGENTS[@]}"; do
            API_AGENT="${AGENT_MAP[$agent]}"
            RESULT_JSON=$(curl -s "$FOSSOLOGY_URL/uploads/$UPLOAD_ID/licenses?agent=$API_AGENT" \
              -H "Authorization: $AUTH_HEADER")
            COUNT=$(echo "$RESULT_JSON" | jq 'length')
            AGENT_RESULTS[$agent]="$COUNT"
          done

          # Final summary table
          echo ""
          echo "==================== Scan Summary ===================="
          printf "%-20s %-12s %-10s\n" "Agent" "Status" "Findings"
          echo "------------------------------------------------------"
          for agent in "${AGENTS[@]}"; do
            API_AGENT="${AGENT_MAP[$agent]}"
            printf "%-20s %-12s %-10s\n" \
              "$agent" \
              "${AGENT_STATUS[$API_AGENT]:-Unknown}" \
              "${AGENT_RESULTS[$agent]:-N/A}"
          done
          echo "======================================================"

      - name: Upload Fossology reports
        uses: actions/upload-artifact@v4
        with:
          name: fossology-reports-${{ github.run_id }}
          path: fossology_reports/*
